C笔记
更新时间：
2022/8/16 15:13
作者：
lsfo26wo

.c-源文件
.h-头文件

程序标准格式：
#include<stdio.h>          （包含标准输入输出的头文件,库函数）

int main()                      （整数  主函数）
{
      printf("内容\n");       （每段要用   ;    作为每段结束符号）   
      return 0;                   （结束语 返回整数循环）
}

C常用函数：
                 (库函数-C语言标准库-使用函数之前要输入#include<stdio.h>标准格式）
                 printf:   打印函数
                 scanf:    输入数据-输入函数 （scanf： 是C语言提供的标准函数，(若出
现  Consider using scanf_s instead. To disable deprecation  的报错，翻译为：考虑使用scanf_s
代替，或禁用弃用时：可将 #define _CRT_SECURE_NO_WARNINGS 1输入在整段程序的开头第一行，
即可取消所有此类函数报错，因scanf_s是VS提供的函数无法在其他编译器被识别，不是C语言提供
的标准函数。 )）
%d- 打印整形
%c- 打印字符
%f- 打印小数
%p- 以地址形式打印
%x- 打印16进制数字


数据类型
char :  字符类型[包括单个字符如‘A’,char需要输入'         '来表达字符，单引号括起来的一个字符，
标准格式用法 ：char ch ='A';  (ch:变量值)
                                                                                     printf("%c\n",ch);]
 

short:  短整形  [                                        ]
int    :  整形      [包括所有整数如 20 ，标准格式用法：int age =20;
                                                                                 printf("%d/n",age）;]
long :  长整形    （）
long long: 更长的整形 （）
float :  单精浮点数（）
double: 双精度浮点数（）

计算机单位

bit   -比特位   【0     1    两个比特位】
byte-字节       【一个字节等于8个比特位】
kb                  【一kb等于1024个字节】
mb                 【1024】
gb                  【1024】
tb                   【1024】
pb                  【...........】

变量分类
变量：  描述会变的量就叫变量如：年龄。
常量：  描述不变的量就叫常量如：血型。

变量定义方法：
int             age      =  100;
数据类型    变量名       值

变量分类：
              全局变量
              局部变量
全局变量-定义在“{}(代码块)”之外的变量。
局部变量-定义在“{}(代码块)”内部的变量。
 

int a = 100;(全局变量-全局变量和局部变量的名字尽量不要相同，容易产生bug.
int main()
{                  （{}即为代码块）

    int a = 10;(局部变量-当全局变量与局部变量的名字相同时，局部变量优先。
 

}

 int main()
{
C语言语法：变量必须定义在 " 代码块{}"的最前面，
       int hun1 = 0;
       int hun2 = 0;
       int fe = 0;
       scanf("%d%d",&hun1,&hun2);
       fe = hun1 /  hun2;
       printf("fe =%d\n",fe);
       return 0;

常量：
        字面常量：比如“1”固定数字，字面上理解固定不变的值，
         const修饰的常变量：在变量值前面加上 const 时该变量值成为常变量无法变化，const 
只是赋予变量一种常量属性。格式：
                                          int main()
{
       const int he = 1;//在变量值 “he” 前方加入const该变量值则无法变动成为常
变量。
       printf("%d\n",he);
       he = 2;
       printf("%d\n",he);
       return 0;
     #define 定义的标识符常量：定义字符的常量，标准格式：
   
   #define AB 1 //将该定义常量放在主函数前面使用，
  int main()
{
       int AB = 1;//为字符变量
       printf("%d\n",AB);
       return 0;
枚举常量  enum：一 一列举的常量，标准格式：

           enum Color //枚举颜色
   {
       RED, //红
       YELLOW,//黄  枚举常量下方代码块内无法修改
       BLLE//蓝
   };
int main()
{
       enum Color color = BLLE;//列举出颜色为蓝色。
       printf("%d\n",color);
       return 0;  
字符串：               
             由双引号 “abc”引起来的字符叫做字符串，字符串的结束标志是一个转义字
符  \0   计算字符串长度时 \0 是结束标志不会算到字符串内容里，标准格式：
                        int main()
{
       char zf1[] = "abc";  （该程序内容有 a b c \0）遇 \0 即停止。
       char zf2[] ={'a','b','c','\0'};遇到 \0 时字符串内容停止，\0 不算作内容。
       printf("%s\n",zf1);
       printf("%s\n",zf2);
       return 0;

strlen :  计算字符串长度的  标准格式：
                               #include<string.h>   要搭配头文件使用
                                   int main()
{
                 char arr1[] = "abc"; 
                                           printf("%d\n",strlen（arr1）); // 可计算出（arr1）的字符长
度。   计算出的是 /0 之前的数组长度个数

sizeof(): 计算 数组 所占空间的大小，
    格式：
             #define _CRT_SECURE_NO_WARNINGS 1
     #include<stdio.h>
     int main()
     {
       char arr[] = "abcd"; 字符串中包含"a b c d \0"占用 5 个空间大小 "\0"也算一
个空间大小 
       printf("arr= %d\n",sizeof(arr)); arr 结果为 5 
       return 0;
     }
用 sizeof() 计算出数组总个数：
格式：
#define _CRT_SECURE_NO_WARNINGS 1
#include<stdio.h>
int main()
{
       
       int arr[] = {1,2,3,4,5,6,};
       int a = sizeof(arr)/sizeof(arr[0]);计算出 arr[] 的数组总数个数 6 个  /0 
不作数 
       printf("a= %d\n",a);
       return 0;
}
 

strlen 为 库函数 在测量字符串长度时，要遇到 “/0”才会停止，“/0”为结束标志，遇不到
“/0”则会一直向后找产生一个随机值。
例：   char arr[]  = {‘A’'B'  'C'}     只有三个字符没有“/0”会随机向后找，找到“/0”则
停止 ：会产生随机值。


strlen 和 sizeof 的区别 
strlen - 只能针对字符串求出长度 - 库函数 - 要引头文件<string.h>
sizeof - 计算 变量，数组，类型的大小 - 单位为字节 - 操作符


一维 数组：
定义; 数组下标 从  0  开始计算
要点：创建数组时“[ ]”下标引用符 ，中必须输入常量，如：int[1]，”不可输入变量，如：
int[i]“

char 类型的字符串计算方法：
#define _CRT_SECURE_NO_WARNINGS 1
#include<stdio.h>
int main()
{
   char arr[] = "abcdef"; arr数组中包含 7 个元素： a , b , c , d , e, f , \0  
                        字符下标：   0  1  2  3  4  5  6
   printf("%c\n",arr[3]); []为数组下标引用符，调用那个字符 就输入该字符的下标，结果为 
d 。
   return 0;
}

int 类型的数组计算方法：
#define _CRT_SECURE_NO_WARNINGS 1
#include<stdio.h>
int main()
{
  int arr[] = {1,2,3,4,5,6,7,8,9,0};
  int sz = sizeof (arr)/sizeof (arr[0]);//求出 数组中的整个元素数量
  int i = 0;// 数组下标初始化为 0 
  for(i = 0;i<sz;i++)//将数组以循环递增的方式，将字符列出来
   {
       printf(" %d",arr[i]);//打印出整体数组 1 2 3 4 5 6 7 8 9 0
   }
  return 0;
}

#define _CRT_SECURE_NO_WARNINGS 1
#include<stdio.h>
int main()
{
  int arr[] = {1,2,3,4,5,6,7,8,9,0};
  int sz = sizeof (arr)/sizeof (arr[0]);//求出 数组中的整个元素数量
  int i = 0;
  for(i = 0;i<sz;i++)//将数组以循环递增的方式，将字符列出来
 {
   printf("&arr[%d] =%p\n",i,&arr[i]);//打印出整体数组的存储地址
 }
  return 0;
}
&arr[0] =0020F744
&arr[1] =0020F748
&arr[2] =0020F74C
&arr[3] =0020F750
&arr[4] =0020F754
&arr[5] =0020F758
&arr[6] =0020F75C
&arr[7] =0020F760
&arr[8] =0020F764
&arr[9] =0020F768
由此得知 一维数组地址在内存中连续性存放，间隔同等为整形的 4 个字节 


二维数组：
定义：二维数组可以看成由一维数组几行几列组成的数组
访问数组依然用 ”[ 行 ] [ 列 ]“ 进行访问
要点：创建数组时“[ ]”下标引用符 ，中必须输入常量，如：int[1]，”不可输入变量，如：
int[i]“

#define _CRT_SECURE_NO_WARNINGS 1
#include<stdio.h>
int main()
{
   int arr[3][4] = {{1,2,3},{4,5}};//[3][4]表示3行4列，3行对应为：{1，2，3，} 4列
对应为：｛4，5，0，0｝缺位自动补“0”
   int i = 0;
  for(i = 0;i<3;i++)//循环行数
 {
    int j = 0;
    for(j=0;j<4;j++)//嵌套列数
   {
       printf("%d ",arr[i][j]);//将行列[3][4]组合一起打印
   }
       printf("\n");//格式控制：打印一个循环就换行
   }
 

   return 0;
}结果为：
1 2 3 0
4 5 0 0
0 0 0 0

二维数组地址在内存中也是连续性存放，与一维数组间隔同等为整形
的 4 个字节 。

冒泡排序算法：

#define _CRT_SECURE_NO_WARNINGS 1
#include<stdio.h>
void bubble_sort(int arr[],int sz)
{
   int i = 0;
    for(i=0;i<sz-1 ;i++)//确定冒泡排序的趟数
   {
     int flag = 1;//假设这一趟排序的数据已经是有序的了
     int j = 0;//每一趟的冒泡排序
     for(j=0;j<sz-1-i ;j++)
   {
        if(arr[j]>arr[j+1])//将数组排成升序
   {
       int tpm = arr[j];
         arr[j] = arr[j+1];
         arr[j+1] =  tpm;
         flag = 0;//本趟排序的数据不完全有序，相当于一个判断变量，等于 0 证明数组
是无序的
   }
   }
       if(flag == 1)// 等于 1 本次数据有序 跳出循环 不需要排序
     {
        break;
     }
   }
}
int main()
{
       int arr[] = { 4, 5, 3, 2, 6, 7, 8, 9, 1};
       int i = 0;
       int sz = sizeof(arr)/sizeof(arr[0]);//计算出整个数组元素
       bubble_sort(arr,sz);//冒泡排序函数
       for(i=0;i<sz;i++)
       {
            printf("%d ",arr[i]);//打印出arr数组的所有数据
       }
       return 0;
}

arr  ,  &arr[0] 和  &arr ，sizeof(arr) 的区别：
#define _CRT_SECURE_NO_WARNINGS 1
#include<stdio.h>
int main()
{
  int arr[] = {1,2,3,4,5,};
   printf("%p\n",arr);        //取出首元素的地址
   printf("%p\n",&arr[0]);     //取出首元素的地址
   printf("%p\n",&arr);       //取出整个数组的地址，是从首元素开始计算
   printf("%d\n",sizeof(arr));  //整个数组的大小-单位是：字节 数组占用 20 个字节
   return 0;
}







strcpy : 拷贝字符串
#define _CRT_SECURE_NO_WARNINGS 1
#include<stdio.h>
#include<string.h>  用strcpy需引用 <string.h>头文件
int main()
{
  char arr1[] = "bit";
  char arr2[20] = "#########";
  strcpy(arr2,arr1); 将数组 arr1 内的字符拷贝到数组 arr2 中，拷贝时会将字符中的“\0”也
带了进来
  printf("%s\n",arr2); 结果为“bit”
 return 0;
}

转义字符：
               \n     字符换行
                \t     水平制表符（即空两格）
                \?     在书写连续多个问号时使用，防止他们被解析成三字母词。
                \'     用于表示字符常量
                \"     用于表示一个字符串内部的双引号
                \\     注释符
                \a    警告字符，蜂鸣器
                \b    退格符        
                \f     进纸符
                \r     回车
                \v    垂直制表符
                \ddd   ddd表示1~3个八进制的数字，八进制数字会对应ASCII码值   例：\18--
1  8是两个八进制数字转换成十进制数字为 56 会对应ASCII码值中的  8 ，会打印出为 8 。
               \xdd   dd表示两个十六进制的数字，会对应ASCII码值   例：\x61--6  1是两个十
六进制数字转换成十进制数字为 97 会对应ASCII码值中的 a ，打印出为  a 。
             注：\后面直接跟数字没有 X 的 如：\18 即为八进制数字
                    \后面有一个  X 的 如：\x61 即为十六进制数字



if 语句==选择语句
   ==判断语句是否等于后数   与  if 配套使用  if（变量名 ==1）
int main()
{
       int inpuut = 0;
       printf("现在开始\n");
       printf("你要好好学习吗？(1/0)>:");
       scanf("%d",&inpuut);
       if(1 == inpuut)//将判断的常量 1 放到左边不容易出错 
              printf("好offer\n");
       else //表示其他，if 与 else 配对的原理为：两个最近的而且未配对的会配对
上。
              printf("no good\n");
       return 0;

  
int main()
        {
       int age = 10;
       if(age<18)
       {
          printf("未成年,");
          printf("不能抽烟\n"); 如果一个 if 要控制多条语句就要用｛｝把语句括起来
       }
switch（整形表达式） 判断整形值

int day = 0;
scanf("%d",&day); 输入一个整形变量day
switch(day) 判断 day 为几就从 case 几入口进去执行
       {
       case 1: switch 要和 case 配合使用
              printf("星期1\n");
              break; 为结束 case 的结束语，直接结束整段。
       case 2:
              printf("星期2\n");
              break;
       case 3:
              printf("星期3\n");
              break;
       case 4:
              printf("星期4\n");
              break;
       case 5:
              printf("星期5\n");
              break;
       case 6:
              printf("星期6\n");
              break;
       case 7:
              printf("星期天\n");
         default: 用来处理输入错误的情况
                  printf("输入错误");
       }


while 语句  

while起到循环作用 标准格式：

      int main()
{
       int line = 0;
       printf("现在开始\n");
       while(line++<20000)
       {
              printf("你敲代码:%d\n",line);
       line++;
       
       }
       if(line>=200)
               printf("好offer\n");
       
       return 0;
 

while的例子应用：
         int ret =0;
         int ch = 0;
       char password[20] = {0};创建一个 char 类型的数组给出[20]的空间
       printf("请输入密码:>");
       scanf("%s",password); 输入 %s 密码字符串，并存放在password数组中,
                       scanf将密码读走后，输入缓冲区内还剩余一个“\n“通过
ASCII码值转换也就是回车键
          
         while((ch =getchar()) != '\n') :scanf读走密码后剩余的字符则都由while循
环读到变量 ch 当中读到‘\n即回车键’时停止
         {                     getchar()是一个输入函数, char 类型的输入
函数 
            ;
          }
       printf("请确认密码(y/n):>");
         ret = getchar（）; 将输入的字符（y/n）读出来放进变量 ret 当中
       if(ret= ='y') 用 if 语句进行判断是否是字符 y
       {      
              printf("确认成功\n");
       
       }
       else
       {
              printf("放弃确认\n");
       
       }
       return 0;
 

 

例句2：
       int ch = 0;
       while((ch = getchar())!= EOF)：接收键入的值放进 变量 ch 当中
       {
              if(ch<'0'|| ch>'9'):可以输入0~9之间所有数值
              continue;循环判断变量 ch 的值。
              putchar(ch);打印出变量 ch 的值。
       }
       return 0;
}
 

 

 

 

 

 

continue : 继续循环
int main()
{
       int i = 1;
       while(i<=10)
       {
         if(i==5)
         continue;终止循环中单次 continue 后面的代码，直接跳到 while 处继续循
环判断。
            printf("%d ",i);结果为1 2 3 4 死循环,因 i++ 在 continue 的下方 i 无法得
到调整
            i++;   
       }
       return 0;
}
 

 

for循环
for循环与while循环相比好处在于简便 好修改数值
int main()
{
       int i = 0;
       for(i=1;i<=10;i++)：从1开始 要1~10之间的数字 1自加一
       ｛ 
          if(i = = 5)  ：= = 不能判断两个字符串是否相等 ！！(要引用库函数：strcmp)
要引用头文件<string.h>
          continue;
          printf("%d \n",i);结果为1 2 3 4 6 7 8 9 10
       } 因 i++ 在continue 上方 执行到 5 时跳过， 5 不执行后面数据则继续执行
       return 0;
}
 

 

 

for循环三个表达式可以被省略，但是判断部分如果被省略，那判断条件 则恒为真 即非零 程序会死
循环。
int main()
{
       for(;;)
       {
              printf("hh\n");结果为死循环  因为判断部分被省略
       }
       return 0;
}

 


 

按顺序查找算法
（效率不高）
 

int main()
{
       int arr[]={1,2,3,4,5,6,7,8,9,10};
       int j = 9;
       int i = 0;
       int z = sizeof(arr)/sizeof(arr[0]);z = 计算出了数组元素的个数为 10；
       for(i=0;i<z;i++) i 的初始化下标为 0 ；判断i<10 就可以进入循环；i  自增 
1
       {
              if(j==arr[i])
              {
                   printf("找到了,下标是 %d\n",i);结果为 8 即为下标 8 就是数组
中的 9
              break;
              }
       }
       if(i==z)
              printf("找不到 ");即是要找的数不在数组中
       return 0;
}
 

二分查找算法又称折半查找算法
（效率更高）
int main()
{
       int arr[]={1,2,3,4,5,6,7,8,9,10};
       int z = 7;
       int i = 0;//左下标
       int zs = sizeof(arr)/sizeof(arr[0]);整个数组元素个数 有10个
       int y = zs-1;//右下标
       while(i<=y) 左下标小于等右下标时 才能进入循环判断
       {
              int mid =(z+y)/2;左右下标相加除以2 则为折中查找（从中间开始）
              if(arr[mid]>z)中间下标大于要找的值时
              {
                     y = mid-1;右下标-1           
              }
              else if(arr[mid]<z)用右下标减过的值再与要找的值进行判断
              {            大于要找的值时
                     i = mid+1;左下标+1
              }
              else
              {
                     printf("找到了%d\n",mid);一直循环直到找到下标
为 6 
                     break;        
              }
              if(i>y) 左下标大于右下标时则左右下标交错就找不出
              {
                     printf("找不到\n");  
              }
       }
       return 0;
}
 

函数二分查找法
#define _CRT_SECURE_NO_WARNINGS 1
#include<stdio.h>
int binary_aearch(int k,int arr[],int sz)
{
       int y = 0;//左下标
       int z = sz-1;//右下标
       while(y<=z)
       {
              int maid = (y+z)/2;
              if(arr[maid]>k)
              {
                     z = maid-1;
              }
              else if(arr[maid]<k)
              {
                     y = maid+1;
              }
              else
              {
                     return maid;
              }      
       }
       return -1;
}
int main()
{
       int arr[] = {1,2,3,4,5,6,7,8,9,10};
       int k = 7;
       int sz = sizeof(arr)/sizeof(arr[0]);
       int ret = binary_aearch(k,arr,sz);
       if(ret == -1)
       {
              printf("找不到\n");
       }
       else
       {
              printf("找到了下标是: %d\n",ret);
       }
       return 0;
}
 

 

 

 

 

自定义函数：自己制定的函数  可自行编写函数名  
                  如：
 【                         int lz(int x, int y)
     {
       int z = x+y;
       return z;
     }
】为函数体   lz   为自定义函数名。

【      int main()
   {
       int s = 0;
       int c = 0;
         int w = 0;
       w = lz(9,8);
       
       printf("%d\n",s);
       return 0;
    }
】调用函数 lz 计算函数体中 x , y关系。可简化代码，代码复用方便。

移位操作符：
        <<  左移操作符   移动的是二进制位 例：int a = b<<1;      表示b的二进制位向左移动
一个比特位  
      00000001=1
      00000010=2
      >>右移动操作符 同理移动只是移动方向相反。

位操作符 ：
      &  按位与
       |    按位或
      ^  按位异或             
口诀:
       与：全一则一
       或：有一则一
    异或：有一则一全一则零
例：
 &: 按位与 全一则一
  nit a = 3;
  int b = 5;
  int c = a&b;    结果为 1 
 

a   0 1 1   二进制转十进制为 3
b   1 0 1   二进制转十进制为 5
c    0 0 1  按位与结果为 1
|: 按位或  有一则一
例：
  nit a = 3;
  int b = 5;
  int c = a|b; 结果为7
 

a   0 1 1   二进制转十进制为 3
b   1 0 1   二进制转十进制为 5
c   1 1 1   按位或结果为 7

^: 按位异或 有一则一全一则零
例 ：
     nit a = 3;
     int b = 5;
     int c = a^b; 结果为7
 

a   0 1 1   二进制转十进制为 3
b   1 0 1   二进制转十进制为 5
c   1 1  0   按位异或结果为 6

复合赋值符：

+=    -=    *=   /=   %=  <<=   >>=   &=     |=    ^=

例：
｛int a = 10;
   a = a+10;
                   两种赋值相同。
   a += 10；
｝

操作符 ：
 

！  逻辑反操作

-     负值    

+     正值

&    取地址

sizeof    计算操作的类型长度（以字节为单位）

~    对一个数的二进制按位取反

--   前置 后置

++  前置  后置

*    解引用操作符/间接访问操作符

sizeof  为计算数组与字符的长度大小  （单位字节）例 ：

            int arr[] = {1,2,3,4,5,};
         注：arr[]是下标引用符 []中是几就引用哪个下标。
       printf("%d\n",sizeof(arr)+sizeof(arr[0]));
         arr的整数组20个字节  +  单个数值4个字节
       return 0;

~ 


++a    前置++a    先+后用
    int a = 10;
   int b = ++a;
    printf("a = %d\n",a);   在10的基础上 +1 为11
    printf("b = %d\n",b);  在10的基础上 +1 为11
    return 0;
 

a++ 后置a++  先用后+

   int a = 10;                             int b = a++;
   printf("a = %d\n",a); 在10的基础上 +1 为11
   printf("b = %d\n",b); a赋值给b值为10不变
   return 0;
 

&& 逻辑与： 真：表示为 非0。       假：表示为0. 
 两个数都为真时 （&&）逻辑与的结果就为真。

两个数只要有一个数为假（&&）逻辑与的结果就为假。

（&&）逻辑与的结果默认为 1 。例：
int main()
{
       int a = 3;
       int b = 5;
       int c = a&&b;
       printf("%d\n",c);结果为 1 ，为真。
       return 0;
}
 

| |  逻辑或  例： 

      两个数其中有一个为真时（| |）逻辑或的结果就为真。

int main()
{
       int a = 0;
       int b = 5; 有一个为真结果就为真。
       int c = a||b;
       printf("%d\n",c);结果为 1 ，为真。
       return 0;
}
 

（exp1 ?   exp2 :   exp3）  亦称三目操作符：有三个操作数 要一起使用的
    
int main()
{
   int a = 8;
    int b = 6;
    int c = 0;
    c = (a>b? a:b);比较两个数值大小 a 是否大于 b .
    printf("%d\n",c);结果为最大数 8
   return 0;
}
 

三目操作符也可用在函数中：
#include<stdio.h>
int get_max(int x, int y) 对应 a b 值
{
       int z = 0; 用于存放比较结果
       z = (x>y? x:y);三目操作符比较两数大小
       return z;
}
int main()
{
       int a = 10;
       int b = 20;
       int max = get_max(a,b); 调用get_max()函数
       printf("max = %d\n",max);
       return 0;
}

关键字：
  typedef : 类型从新定义
      
  
  static : 将局部变量的生命周期 出作用域也不会失效，生命周期延长，
          应用到全局变量时会改变变量的作用域。
对于函数类似的效果，


e x t e r n :外部声明符号   用于调取整个工程项目的变量及函数。

#define 定义的标识符常量
 #define MAX 50 ：变量 MAX 值为50
int main()
{
       int a = MAX;
       printf("%d\n",MAX); 输出结果为50
       return 0;

#define 也可以定义宏  宏是带参数的
#define MAX(x,y) (x<y? x:y)：为宏定义格式
int main()
{
       int a = 10;
       int b = 20;
       int max = MAX(a,b);会引用MAX的宏
       printf("%d\n",max);
       return 0;

指针：

int main()
{
       int a = 10;//设一个整形变量 a 为a10
       int*p = &a;//将 a 按地址方式取出 把a的地址放到p当中 p即为a指针变量 
int* 为a指针变量 p 的类型
       *p = 20;//指针变量 p 前面的 * 为解引用操作符 即为将 p 解引用操作找到a的
地址 将a的值赋值为20
       printf("%d\n",a);//现整形变量a的值已赋值为20
       return 0;
}

指针变量值与指针类型在32位操作系统上 为 4 个字节。
指针变量值与指针类型在64位操作系统上为  8 个字节。

int main()
{
 double a = 3.14;
 double* p = &a; 将 a 的址赋与double* 类型 p 的指针变量中，
 *p = 4.5; * 对指针变量 p 进行解引用操作 按地址形式找到变量 a 将数值 4.5 赋值给 a ，即 
a 的值改变为 4.5 。
 printf("%d\n",sizeof(p)); 在32为操作系统平台上指针变量的大小为4个字节，64位操作系统
则为8个字节。
 printf("%lf\n",a); 打印出 double类型的变量a 数值为4.5
 printf("%lf\n",*p); 打印出被解引用*操作 p 的值 也为a的值两者相同。4.5
 printf("%p\n",p); 将指针变量 P 的地址打印出来 与a的地址相同。
 printf("%p\n",&a); 将 a 以地址的形式打印出来与指针变量 p 相同。
 return 0;
}

结构体：普通结构体    
( .  )与结构体变量一起使用可以引出结构体中的 . 成员
（->)与结构体指针变量一起使用可以指出 -> 成员
结构体关键字：struct  描述结构体对象 如书 book
struct Book
{
 char name[20];定义一个char 类型空间来存放数组方式的书名
 short price;定义一个short 类型空间来存放价格
}; 该；不可缺少是用来结束结构体类型定义的
int main()
{
 struct Book b1 = {"c++语言编程",50};用结构体类型-创建一个该类型的结构体变量 b1
 printf("书名：%s\n",b1.name);用结构体变量b1通过 . 来找到book中的《name书名》
 printf("价格：%d元\n",b1.price);用结构体变量b1通过 .来找到book中的价格price
 return 0;
}
用指针变量进行编写结构体
例：
struct Book
{
       char name[20];
       short price;
};
int main()
{
struct Book b1 = {"C++编程",50};
struct Book* pd = &b1;将结构体变量b1的的地址放到指针变量pd当中
printf("书名：%s\n",(*pd).name);
printf("书名：%s\n",pd->name);指针变量pd ->指向名称与上面的结果相同
printf("原价格：%d元\n",(*pd).price);
printf("原价格：%d元\n",pd->price);两者相同
(*pd).price = 118;将指针变量 pd 用 * 进行解引用操作 . 进行引用(price)价格进行修改。
printf("更改后的价格：%d元\n",(*pd).price);
printf("更改后的价格：%d元\n", pd->price);
return 0;
}
 

函数指针用法：
void swap(int*pa,int*pb) 对应传入 a 和 b 的值 如果不用指针只是将 a和b的值拷贝过来无法
对 a和b 的值进行调换 所以要用指针进行传地址转换两个数值地址即可 
{
 int emp = 0;一个临时变量用于替换值
 emp = *pa; 将 &a 的地址放到 emp 当中 *pa 地址就空置了
 *pa = *pb; 再将 *pb 即：&b 的地址放进 *pa 当中 *pb 地址就空了
 *pb = emp; 将 emp 中的 &a 地址放进 *pb 当中  完成数值交换
}
int main()
{
       int a = 10;
       int b = 20;
       swap(&a,&b);调用 swap（） 函数
       printf("a = %d\nb = %d\n",a,b); 完成 a 和 b 的数值交换。
       return 0;
}
 

 

 

 

修改结构体数组的方法
 例：
#include<stdio.h>
#include<string.h> strcpy 是库函数，要用头文件<string.h>引用才能使用
struct Book
{
 char name[20];该名称类型为数组不能直接修改，要用 strcpy 进行修改，strcpy 是拷贝函数
 short price;
};
int main()
{
struct Book b1 ={"c++编程",50};
strcpy(b1.name,"c++语言编程"); strcpy 是拷贝函数：是将"C++语言编程"拷贝到 "b1.name"当
中进行修改
printf("更改后：%s\n",b1.name);更改后为："c++语言编程"，
return 0;
}
 


goto 语句 
是跳出多层嵌套的 for循环时使用 不用使用 break 一段一段跳出 goto 语句可以指定跳的位置
直接跳出 for 循环的多层嵌套
例：














































